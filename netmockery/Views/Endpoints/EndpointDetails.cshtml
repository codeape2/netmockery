@using netmockery
@model Endpoint

@{ 
    Layout = "Base";
    var responseRegistry = ViewData["responseRegistry"] as ResponseRegistry;
    var highlight = (int)ViewData["highlight"];
}

<h1>@Model.Name <small>@Html.ActionLink("endpoint.json", "EndpointJsonFile", new { name=ViewData["name"] })</small></h1>
<p>
    Path regex: <code>@Model.PathRegex</code>
</p>

<h2>Request handling rules</h2>

<table class="table">
    <thead>
        <tr>
            <th>
                #
            </th>
            <th>
                Request matcher
            </th>
            <th>
                Response
            </th>
            <th>
                Delay
            </th>
        </tr>
    </thead>
    <tbody>
        @{ var i = 0;}
        @foreach (var t in Model.Responses)
        {
            var creator = t.Item2;
            <tr id="rqm@(t.Item1.Index)"
                @if (t.Item1.Index == highlight)
                {
                    <text>class="rqmrow info"</text>
                }
                else
                {
                    <text>class="rqmrow"</text>
                }
            >
                <td>
                    @(t.Item1.Index)
                </td>
                <td>
                    @await Component.InvokeAsync("RequestMatcher", new { requestMatcher = t.Item1 })
                </td>
                <td>
                    @await Component.InvokeAsync("ResponseCreator", new { responseCreator = creator, endpoint=Model })
                </td>
                <td>
                    @if (creator.Delay > 0)
                    {
                        <text>@creator.Delay seconds</text>
                    }
                    else
                    {
                        <text>(no delay)</text>
                    }
                </td>
            </tr>
            i++;
        }
    </tbody>
</table>

@Html.ActionLink("Responses", "ForEndpoint", "Responses", new { endpointName = Model.Name })

@if (! Model.RecordRequests)
{
    <text>(only errors are recorded for @Model.Name endpoint)</text>
}

@if (Model.ParameterCount > 0)
{
    <h2>
        Runtime adjustable parameters
        @if (Model.HasAdjustedParams)
        {
            <small>Adjusted</small>
        }
    </h2>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Value</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @for (var paramIndex = 0; paramIndex < Model.ParameterCount; paramIndex++)
            {
                var param = Model.GetParameter(paramIndex);
                <tr>
                    <td>
                        <code>@param.Name</code>
                        <p>
                            @param.Description
                        </p>
                    </td>
                    <td>
                        @param.Value
                    </td>
                    <td>
                        <a href="@Url.Action("AdjustParam", new { name = Model.Name, index = paramIndex })">Edit</a>
                        @if (!param.ValueIsDefault)
                        {
                            <a href="@Url.Action("ResetParam", new { name = Model.Name, index = paramIndex })">Reset to default</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
